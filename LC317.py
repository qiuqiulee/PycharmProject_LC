import numpy as np
grid = [[0,2,2,0,2,0,0,0,2,2,0,2,0,2,2,0,2,2,2,0,0,0,0,2,1,0,0,2,2,0,0,0,2,0,0,2,0],\
        [0,2,2,2,0,1,0,0,2,2,0,0,0,2,2,0,0,2,2,0,0,2,0,0,0,0,2,0,0,0,2,2,0,0,0,0,0],\
        [0,0,2,2,2,0,2,2,2,2,0,2,0,0,0,0,2,2,2,0,2,2,2,1,0,2,0,0,2,0,0,0,0,2,0,0,2],\
        [0,0,0,2,0,0,2,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,0,0,2,2,2,2],\
        [2,2,2,2,2,0,0,0,2,2,2,2,0,2,2,2,2,0,0,2,1,0,0,2,0,0,2,0,2,2,2,2,1,2,0,0,0],\
        [0,2,1,2,0,0,0,0,0,0,0,0,0,2,2,0,2,2,0,2,0,0,2,2,0,0,2,0,0,0,2,0,2,2,0,0,2],\
        [0,0,0,0,2,0,0,0,2,0,2,0,2,2,2,0,0,0,2,2,0,0,2,0,0,2,0,0,0,0,2,0,0,0,0,2,0],\
        [2,0,2,0,2,0,0,2,2,0,0,0,0,2,0,0,2,2,0,2,2,0,2,2,1,2,2,0,0,0,2,2,1,2,0,0,2],\
        [2,0,2,2,0,0,0,0,0,0,0,2,0,2,2,1,0,2,0,2,0,2,0,0,0,0,0,2,0,0,0,2,2,0,2,0,2],\
        [2,0,0,0,2,2,0,2,0,0,0,2,0,2,0,2,0,2,2,2,0,0,0,1,0,0,0,0,1,0,0,0,0,2,0,0,0],\
        [0,2,0,0,0,2,0,2,0,0,0,1,0,2,0,0,2,0,2,0,0,0,0,2,0,0,0,2,2,2,0,0,2,0,2,0,0],\
        [0,0,0,0,2,2,0,1,2,0,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,2,0,0,2,0,0,2,0,0,2,0,1],\
        [0,1,2,2,0,2,0,0,2,0,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,2,2,0,0,0,0],\
        [2,2,2,2,2,2,2,0,2,0,0,2,2,0,2,0,0,0,0,2,0,0,0,2,2,2,0,0,0,2,2,2,0,0,2,0,0]]



dirc = [[1,0],[0,1],[-1,0],[0,-1]]
m = len(grid)
n = len(grid[0])
bl = []
for i in range(m):
    for j in range(n):
        if grid[i][j] == 1:
            bl.append([i,j])
nob = len(bl)
dis = np.ones((nob,m,n)) *10000


ck =  np.zeros((nob,m,n))

for w in range(nob):

    tpdis = 0
    queue = [[bl[w][0],bl[w][1]]]
    while queue:
        for [x,y] in queue:
            dis[w][x][y] = tpdis
            if [x, y] not in bl:
                ck[w][x][y] = 1

        tpdis += 1
        nxqueue = []
        for x,y in queue:
            for dr in range(4):
                if 0<=x+dirc[dr][0]<m and  0<=y+dirc[dr][1]<n and \
                    grid[x+dirc[dr][0]][y+dirc[dr][1]] == 0 and ck[w][x+dirc[dr][0]][y+dirc[dr][1]] == 0:
                    nxqueue.append([x+dirc[dr][0],y+dirc[dr][1]])
        queue = nxqueue
ckone = np.zeros((m,n))
disone = np.zeros((m,n))
for w in range(nob):
    ckone += ck[w,:,:]
    disone += dis[w,:,:]
res = 10000
for i in range(m):
    for j in range(n):
        if int(ckone[i][j]) == nob:
            res= min(res,disone[i][j])
if res == 10000:
    res = -1
print (int(res))


